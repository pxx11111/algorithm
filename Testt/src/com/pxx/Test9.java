package com.pxx;

public class Test9{ 
	/** * 二叉树的树结点 */ 
	public static class BinaryTreeNode 
	{ 
		int value; 
	BinaryTreeNode left; 
	BinaryTreeNode right; 
	} 
	/** * 题目：输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。 
	 * * 要求不能创建任何新的结点，只能调整树中结点指针的指向。
	 *  * * @param root 二叉树的根结点 
	 *  * @return 双向链表的头结点 */ 
	public static BinaryTreeNode convert(BinaryTreeNode root) 
	{ 
		// 用于保存处理过程中的双向链表的尾结点
		BinaryTreeNode[] lastNode = new BinaryTreeNode[1]; 
		convertNode(root, lastNode); // 找到双向链表的头结点 
		BinaryTreeNode head = lastNode[0]; 
		while (head != null && head.left != null) 
		{ 
			head = head.left; 
			} 
		return head; 
			} 
	/** * 链表表转换操作 * * 
	 * @param node 当前的根结点 * 
	 * @param lastNode 已经处理好的双向链表的尾结点，使用一个长度为1的数组，类似C++中的二级指针 */ 
	public static void convertNode(BinaryTreeNode node, BinaryTreeNode[] lastNode) 
	{ // 结点不为空 
		if (node != null) 
		{ // 如果有左子树就先处理左子树 
			if (node.left != null) 
			{ 
				convertNode(node.left, lastNode); 
				} // 将当前结点的前驱指向已经处理好的双向链表（由当前结点的左子树构成）的尾结点
			node.left = lastNode[0]; // 如果左子树转换成的双向链表不为空，设置尾结点的后继 
//			if (lastNode[0] != null)
//			{ 
//				lastNode[0].right = node;
//				} // 记录当前结点为尾结点
//			lastNode[0] = node; // 处理右子树 
//			if (node.right != null) 
//			{ 
//				convertNode(node.right, lastNode); 
//				}
		} 
		} 
	public static void main(String[] args) 
	{ 
		test01(); 
	
	} 
	private static void printList(BinaryTreeNode head)
	{ 
		while (head != null) 
		{ 
			System.out.print(head.value + "->"); 
			head = head.right; } 
		System.out.println("null"); 
		} 
	private static void printTree(BinaryTreeNode root) 
	{ 
		if (root != null) 
		{ 
			printTree(root.left); 
			System.out.print(root.value + "->"); 
			printTree(root.right); 
			} 
		} // 10 // / \ // 6 14 // /\ /\ // 4 8 12 16 
	private static void test01() 
	{ 
		BinaryTreeNode node10 = new BinaryTreeNode(); 
		node10.value = 10; 
		BinaryTreeNode node6 = new BinaryTreeNode(); 
		node6.value = 6; 
		BinaryTreeNode node14 = new BinaryTreeNode(); 
		node14.value = 14; 
		BinaryTreeNode node4 = new BinaryTreeNode(); 
		node4.value = 4; 
		BinaryTreeNode node8 = new BinaryTreeNode(); 
		node8.value = 8; 
		BinaryTreeNode node12 = new BinaryTreeNode(); 
		node12.value = 12; 
		BinaryTreeNode node16 = new BinaryTreeNode(); 
		node16.value = 16; 
		node10.left = node6; 
		node10.right = node14; 
		node6.left = node4; 
		node6.right = node8; 
		node14.left = node12; 
		node14.right = node16; 
		System.out.print("Before convert: "); 
		printTree(node10); 
		System.out.println("null"); 
		BinaryTreeNode head = convert(node10); 
		System.out.print("After convert : "); 
		printList(head); 
		System.out.println(); 
		}
	}
	